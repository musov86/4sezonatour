using System;
using System.Collections.Generic;
using System.Management.Automation;
using Microsoft.Crm.Sdk.Messages;
using Xrm.Framework.CI.Common;

namespace Xrm.Framework.CI.PowerShell.Cmdlets
{
    /// <summary>
    /// <para type="synopsis">Expands data zip file generated by Configuration Migration Tool</para>
    /// <para type="description">Expands the data zip files and optionally created a file per entity
    /// </para>
    /// </summary>
    /// <example>
    ///   <code>C:\PS>Expand-XrmSolution -ConnectionString "" -EntityName "account"</code>
    ///   <para>Exports the "" managed solution to "" location</para>
    /// </example>
    [Cmdlet(VerbsData.Compress, "XrmCMData")]
    public class CompressXrmCMData : CommandBase
    {
        #region Parameters

        /// <summary>
        /// <para type="description">The absolute path to the data zip file</para>
        /// </summary>
        [Parameter(Mandatory = true)]
        public string DataZip { get; set; }

        /// <para type="description">The source folder of the extracted files</para>
        /// </summary>
        [Parameter(Mandatory = true)]
        public string Folder { get; set; }

        /// <summary>
        /// <para type="description">Combines the xml data entity files into single data file</para>
        /// </summary>
        [Parameter(Mandatory = false)]
        public bool CombineDataXmlFile { get; set; }

        #endregion

        #region Process Record

        protected override void ProcessRecord()
        {
            base.ProcessRecord();

            Logger.LogInformation("Compressing folder {0} to file: {0}", DataZip, Folder);

            ConfigurationMigrationManager manager = new ConfigurationMigrationManager(Logger);

            if (CombineDataXmlFile)
            {
                string tempDirectory = manager.CombineData(Folder);
                manager.CompressData(tempDirectory, DataZip);
            }
            else
            {
                manager.CompressData(Folder, DataZip);
            }

            Logger.LogInformation("Compression Completed");
        }

        #endregion
    }
}